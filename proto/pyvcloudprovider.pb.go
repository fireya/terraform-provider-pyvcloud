// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pyvcloudprovider.proto

/*
Package pyvcloudprovider is a generated protocol buffer package.

It is generated from these files:
	pyvcloudprovider.proto

It has these top-level messages:
	TenantCredentials
	LoginResult
	Catalog
	IsPresentCatalogResult
	CreateCatalogResult
	DeleteCatalogResult
*/
package pyvcloudprovider

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Tenant VCD crendentials
type TenantCredentials struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Org      string `protobuf:"bytes,3,opt,name=org" json:"org,omitempty"`
	Ip       string `protobuf:"bytes,4,opt,name=ip" json:"ip,omitempty"`
}

func (m *TenantCredentials) Reset()                    { *m = TenantCredentials{} }
func (m *TenantCredentials) String() string            { return proto.CompactTextString(m) }
func (*TenantCredentials) ProtoMessage()               {}
func (*TenantCredentials) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TenantCredentials) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *TenantCredentials) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *TenantCredentials) GetOrg() string {
	if m != nil {
		return m.Org
	}
	return ""
}

func (m *TenantCredentials) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type LoginResult struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *LoginResult) Reset()                    { *m = LoginResult{} }
func (m *LoginResult) String() string            { return proto.CompactTextString(m) }
func (*LoginResult) ProtoMessage()               {}
func (*LoginResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoginResult) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type Catalog struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Share       bool   `protobuf:"varint,3,opt,name=share" json:"share,omitempty"`
}

func (m *Catalog) Reset()                    { *m = Catalog{} }
func (m *Catalog) String() string            { return proto.CompactTextString(m) }
func (*Catalog) ProtoMessage()               {}
func (*Catalog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Catalog) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Catalog) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Catalog) GetShare() bool {
	if m != nil {
		return m.Share
	}
	return false
}

type IsPresentCatalogResult struct {
	Present bool `protobuf:"varint,1,opt,name=present" json:"present,omitempty"`
}

func (m *IsPresentCatalogResult) Reset()                    { *m = IsPresentCatalogResult{} }
func (m *IsPresentCatalogResult) String() string            { return proto.CompactTextString(m) }
func (*IsPresentCatalogResult) ProtoMessage()               {}
func (*IsPresentCatalogResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IsPresentCatalogResult) GetPresent() bool {
	if m != nil {
		return m.Present
	}
	return false
}

type CreateCatalogResult struct {
	Created bool `protobuf:"varint,1,opt,name=created" json:"created,omitempty"`
}

func (m *CreateCatalogResult) Reset()                    { *m = CreateCatalogResult{} }
func (m *CreateCatalogResult) String() string            { return proto.CompactTextString(m) }
func (*CreateCatalogResult) ProtoMessage()               {}
func (*CreateCatalogResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateCatalogResult) GetCreated() bool {
	if m != nil {
		return m.Created
	}
	return false
}

type DeleteCatalogResult struct {
	Deleted bool `protobuf:"varint,1,opt,name=deleted" json:"deleted,omitempty"`
}

func (m *DeleteCatalogResult) Reset()                    { *m = DeleteCatalogResult{} }
func (m *DeleteCatalogResult) String() string            { return proto.CompactTextString(m) }
func (*DeleteCatalogResult) ProtoMessage()               {}
func (*DeleteCatalogResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeleteCatalogResult) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func init() {
	proto.RegisterType((*TenantCredentials)(nil), "pyvcloudprovider.TenantCredentials")
	proto.RegisterType((*LoginResult)(nil), "pyvcloudprovider.LoginResult")
	proto.RegisterType((*Catalog)(nil), "pyvcloudprovider.Catalog")
	proto.RegisterType((*IsPresentCatalogResult)(nil), "pyvcloudprovider.IsPresentCatalogResult")
	proto.RegisterType((*CreateCatalogResult)(nil), "pyvcloudprovider.CreateCatalogResult")
	proto.RegisterType((*DeleteCatalogResult)(nil), "pyvcloudprovider.DeleteCatalogResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PyVcloudProvider service

type PyVcloudProviderClient interface {
	// Tenant Loging to VCD
	Login(ctx context.Context, in *TenantCredentials, opts ...grpc.CallOption) (*LoginResult, error)
	IsPresentCatalog(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*IsPresentCatalogResult, error)
	CreateCatalog(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*CreateCatalogResult, error)
	DeleteCatalog(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*DeleteCatalogResult, error)
}

type pyVcloudProviderClient struct {
	cc *grpc.ClientConn
}

func NewPyVcloudProviderClient(cc *grpc.ClientConn) PyVcloudProviderClient {
	return &pyVcloudProviderClient{cc}
}

func (c *pyVcloudProviderClient) Login(ctx context.Context, in *TenantCredentials, opts ...grpc.CallOption) (*LoginResult, error) {
	out := new(LoginResult)
	err := grpc.Invoke(ctx, "/pyvcloudprovider.PyVcloudProvider/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyVcloudProviderClient) IsPresentCatalog(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*IsPresentCatalogResult, error) {
	out := new(IsPresentCatalogResult)
	err := grpc.Invoke(ctx, "/pyvcloudprovider.PyVcloudProvider/isPresentCatalog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyVcloudProviderClient) CreateCatalog(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*CreateCatalogResult, error) {
	out := new(CreateCatalogResult)
	err := grpc.Invoke(ctx, "/pyvcloudprovider.PyVcloudProvider/CreateCatalog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyVcloudProviderClient) DeleteCatalog(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*DeleteCatalogResult, error) {
	out := new(DeleteCatalogResult)
	err := grpc.Invoke(ctx, "/pyvcloudprovider.PyVcloudProvider/DeleteCatalog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PyVcloudProvider service

type PyVcloudProviderServer interface {
	// Tenant Loging to VCD
	Login(context.Context, *TenantCredentials) (*LoginResult, error)
	IsPresentCatalog(context.Context, *Catalog) (*IsPresentCatalogResult, error)
	CreateCatalog(context.Context, *Catalog) (*CreateCatalogResult, error)
	DeleteCatalog(context.Context, *Catalog) (*DeleteCatalogResult, error)
}

func RegisterPyVcloudProviderServer(s *grpc.Server, srv PyVcloudProviderServer) {
	s.RegisterService(&_PyVcloudProvider_serviceDesc, srv)
}

func _PyVcloudProvider_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyVcloudProviderServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pyvcloudprovider.PyVcloudProvider/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyVcloudProviderServer).Login(ctx, req.(*TenantCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _PyVcloudProvider_IsPresentCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Catalog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyVcloudProviderServer).IsPresentCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pyvcloudprovider.PyVcloudProvider/IsPresentCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyVcloudProviderServer).IsPresentCatalog(ctx, req.(*Catalog))
	}
	return interceptor(ctx, in, info, handler)
}

func _PyVcloudProvider_CreateCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Catalog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyVcloudProviderServer).CreateCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pyvcloudprovider.PyVcloudProvider/CreateCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyVcloudProviderServer).CreateCatalog(ctx, req.(*Catalog))
	}
	return interceptor(ctx, in, info, handler)
}

func _PyVcloudProvider_DeleteCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Catalog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyVcloudProviderServer).DeleteCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pyvcloudprovider.PyVcloudProvider/DeleteCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyVcloudProviderServer).DeleteCatalog(ctx, req.(*Catalog))
	}
	return interceptor(ctx, in, info, handler)
}

var _PyVcloudProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pyvcloudprovider.PyVcloudProvider",
	HandlerType: (*PyVcloudProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _PyVcloudProvider_Login_Handler,
		},
		{
			MethodName: "isPresentCatalog",
			Handler:    _PyVcloudProvider_IsPresentCatalog_Handler,
		},
		{
			MethodName: "CreateCatalog",
			Handler:    _PyVcloudProvider_CreateCatalog_Handler,
		},
		{
			MethodName: "DeleteCatalog",
			Handler:    _PyVcloudProvider_DeleteCatalog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pyvcloudprovider.proto",
}

func init() { proto.RegisterFile("pyvcloudprovider.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xdf, 0xab, 0xda, 0x30,
	0x18, 0xd5, 0xaa, 0xd3, 0x7d, 0xb2, 0xd1, 0x65, 0x9b, 0x74, 0xb2, 0x81, 0x44, 0x06, 0x3e, 0x75,
	0xe0, 0x1e, 0xf6, 0xae, 0x7b, 0x19, 0x6c, 0x50, 0xba, 0x1f, 0xb0, 0xc7, 0xac, 0xfd, 0x70, 0xe1,
	0xb6, 0x49, 0x48, 0xa2, 0xe2, 0x3f, 0x7c, 0xff, 0x8e, 0x4b, 0xd3, 0x54, 0xd4, 0x96, 0x0b, 0xf7,
	0x2d, 0xe7, 0x7c, 0x3d, 0x27, 0x5f, 0xcf, 0x21, 0x30, 0x53, 0xa7, 0x43, 0x56, 0xc8, 0x7d, 0xae,
	0xb4, 0x3c, 0xf0, 0x1c, 0x75, 0xac, 0xb4, 0xb4, 0x92, 0x84, 0xb7, 0x3c, 0x2d, 0xe1, 0xd5, 0x2f,
	0x14, 0x4c, 0xd8, 0xad, 0xc6, 0x1c, 0x85, 0xe5, 0xac, 0x30, 0x64, 0x0e, 0x93, 0xbd, 0x41, 0x2d,
	0x58, 0x89, 0x51, 0x7f, 0xd1, 0x5f, 0x3d, 0x4f, 0xcf, 0xb8, 0x9a, 0x29, 0x66, 0xcc, 0x51, 0xea,
	0x3c, 0x0a, 0xea, 0x59, 0x83, 0x49, 0x08, 0x03, 0xa9, 0x77, 0xd1, 0xc0, 0xd1, 0xd5, 0x91, 0xbc,
	0x84, 0x80, 0xab, 0x68, 0xe8, 0x88, 0x80, 0x2b, 0xba, 0x84, 0xe9, 0x77, 0xb9, 0xe3, 0x22, 0x45,
	0xb3, 0x2f, 0x2c, 0x79, 0x03, 0x23, 0x2b, 0xef, 0x50, 0xf8, 0x5b, 0x6a, 0x40, 0x7f, 0xc3, 0x78,
	0xcb, 0x2c, 0x2b, 0xe4, 0x8e, 0x10, 0x18, 0x5e, 0x6c, 0xe1, 0xce, 0x64, 0x01, 0xd3, 0x1c, 0x4d,
	0xa6, 0xb9, 0xb2, 0x5c, 0x0a, 0xbf, 0xc4, 0x25, 0x55, 0xd9, 0x9a, 0xff, 0x4c, 0xa3, 0xdb, 0x64,
	0x92, 0xd6, 0x80, 0xae, 0x61, 0xf6, 0xcd, 0x24, 0x1a, 0x0d, 0x0a, 0xeb, 0xfd, 0xfd, 0x1a, 0x11,
	0x8c, 0x55, 0xcd, 0xbb, 0x8b, 0x26, 0x69, 0x03, 0xe9, 0x27, 0x78, 0xbd, 0xd5, 0xc8, 0x2c, 0xb6,
	0x04, 0x99, 0xa3, 0xf3, 0x46, 0xe0, 0x61, 0x25, 0xf8, 0x8a, 0x05, 0x76, 0x08, 0x72, 0x47, 0x9f,
	0x05, 0x1e, 0xae, 0xef, 0x03, 0x08, 0x93, 0xd3, 0x1f, 0xd7, 0x4a, 0xe2, 0x5b, 0x21, 0x3f, 0x60,
	0xe4, 0x62, 0x22, 0xcb, 0xb8, 0xd5, 0x64, 0xab, 0xae, 0xf9, 0x87, 0xf6, 0x47, 0x17, 0x21, 0xd3,
	0x1e, 0xf9, 0x0b, 0x21, 0xbf, 0xf9, 0x73, 0xf2, 0xae, 0x2d, 0xf2, 0xa3, 0xf9, 0xaa, 0x3d, 0xea,
	0x0e, 0x8e, 0xf6, 0xc8, 0x4f, 0x78, 0x71, 0x15, 0xd0, 0x63, 0xbe, 0x1f, 0x3b, 0x46, 0xed, 0x70,
	0x6b, 0xd3, 0xab, 0x10, 0x9f, 0x68, 0xda, 0x51, 0x00, 0xed, 0x6d, 0xbe, 0xc0, 0xfb, 0x4c, 0x96,
	0xf1, 0xa1, 0x3c, 0x32, 0x8d, 0x67, 0x51, 0xdc, 0xa8, 0x36, 0x6f, 0x6f, 0x5b, 0x48, 0xaa, 0x27,
	0x93, 0xf4, 0xff, 0x3d, 0x73, 0x6f, 0xe7, 0xf3, 0x43, 0x00, 0x00, 0x00, 0xff, 0xff, 0x47, 0xee,
	0x9f, 0xe1, 0x55, 0x03, 0x00, 0x00,
}
